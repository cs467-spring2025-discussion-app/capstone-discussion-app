-- Generated from schema.dbml with dbml2sql tool, then manually altered

create extension if not exists "uuid-ossp";

create table if not exists users (
    id uuid primary key default (uuid_generate_v4()),
    email varchar(255) unique not null,
    password text not null,
    last_login timestamp,
    failed_login_attempts integer default 0,
    account_locked bool default false,
    account_locked_until timestamp
);
-- improve GetUserByEmail funcs
create index idx_users_email on users (email);

create table if not exists sessions (
    id uuid primary key default (uuid_generate_v4()),
    user_id uuid not null references users (id) on delete cascade,
    expires_at timestamp not null,
    created_at timestamp not null default (now())
);
-- improve GetSessionByUserID funcs
create index idx_sessions_user_id on sessions (user_id);

create table if not exists tags (
    id smallint generated by default as identity primary key, -- autoincrement
    -- limit tag name, tag description length to limit large user input
    name varchar(50) unique not null,
    description varchar(50) not null,
    is_custom_tag boolean not null default false,
    created_at timestamp not null default (now())
);

create table if not exists user_tags (
    user_id uuid not null references users (id) on delete cascade,
    tag_id smallint not null references tags (id),
    primary key (user_id, tag_id)
);

create table if not exists badges (
    id smallint generated by default as identity primary key, -- autoincrement
    name varchar(50) unique not null,
    description varchar(50) not null,
    created_at timestamp not null default (now())
);

create table if not exists user_badges (
    user_id uuid not null references users (id) on delete cascade,
    badge_id smallint not null references badges (id),
    awarded_at timestamp not null default (now()),
    primary key (user_id, badge_id)
);

create table if not exists user_reputation (
    user_id uuid primary key not null references users (id) on delete cascade,
    upvotes_received integer not null default 0,
    downvotes_received integer not null default 0,
    last_updated timestamp not null default (now())
);

create table if not exists discussion_topics (
    id smallint generated by default as identity primary key, -- autoincrement
    title varchar(255) not null,
    prompt text not null,
    created_at timestamp not null default (now()),
    last_shown timestamp,
    is_active boolean not null default false,
    show_count integer default 0
);
-- improve discussion sorting
create index idx_discussion_topics_created_at on discussion_topics (created_at);
create index idx_discussion_topics_is_active on discussion_topics (is_active);

create table if not exists replies (
    id smallint generated by default as identity primary key, -- autoincrement
    discussion_id smallint not null references discussion_topics (id),
    user_id uuid references users (id) on delete set null,
    content text not null,
    created_at timestamp not null default (now()),
    is_deleted boolean default false,
    deleted_at timestamp,
    is_hidden boolean default false,
    hidden_at timestamp
);
-- improve GetRepliesByDiscussion and GetRepliesByUserID
create index idx_replies_discussion_id on replies (discussion_id);
create index idx_replies_user_id on replies (user_id);

create table if not exists votes (
    user_id uuid not null references users (id) on delete cascade,
    reply_id smallint not null references replies (id),
    vote_type integer not null check (vote_type in (-1, 0, 1)),
    created_at timestamp not null default (now()),
    updated_at timestamp not null default (now()),
    primary key (user_id, reply_id)
);
-- improve net-vote calculations for badges etc.
create index idx_votes_reply_id on votes (reply_id);
-- improve GetVotesByUserID
create index idx_votes_user_id on votes (user_id);
