Table users {
  id uuid [pk, default: `uuid_generate_v4()`]
  email varchar(255) [not null, unique]
  password text [not null]
  last_login timestamp
  failed_login_attempts integer [default: 0]
  account_locked bool [default: false]
  account_locked_until timestamp

  indexes {
    email
  }
}

Table sessions {
  id uuid [pk, default: `uuid_generate_v4()`]
  user_id uuid [not null]
  expires_at timestamp [not null]
  created_at timestamp [not null, default: `now()`]

  indexes {
    user_id
  }
}
Ref: sessions.user_id > users.id [delete: cascade]

Table tags {
  id smallint [pk, increment]
  name varchar(50) [not null, unique]
  description text [not null] // What does this tag indicate?
  is_custom_tag boolean [not null, default: false] // true for user-created tags
  created_at timestamp [not null, default: `now()`]
}

// Junction Table
Table user_tags {
  user_id uuid [not null]
  tag_id smallint [not null, ref: > tags.id]

  indexes {
    (user_id, tag_id) [pk]
  }
}
Ref: user_tags.user_id > users.id [delete: cascade]


Table badges {
  id smallint [pk, increment]
  name varchar(50) [not null, unique]
  description text [not null] // What does this badge indicate?
  created_at timestamp [not null, default: `now()`]
}

// Junction table
Table user_badges {
  user_id uuid [not null]
  badge_id smallint [not null, ref: > badges.id]
  awarded_at timestamp [not null, default: `now()`]

  indexes {
    (user_id, badge_id) [pk]
  }
}
Ref: user_badges.user_id > users.id [delete: cascade]

Table user_reputation {
  user_id uuid [pk, not null]
  upvotes_received integer [not null, default: 0]
  downvotes_received integer [not null, default: 0]
  last_updated timestamp [not null, default: `now()`]
}
Ref: user_reputation.user_id > users.id [delete: cascade]

Table discussion_topics {
  id smallint [pk, increment]
  title varchar(255) [not null]
  prompt text [not null]
  created_at timestamp [not null, default: `now()`]
  last_shown timestamp
  is_active boolean [not null, default: false]
  show_count integer [default: 0]

  indexes {
    created_at
    is_active
  }
}

Table replies {
  id smallint [pk, increment]
  discussion_id smallint [not null, ref: > discussion_topics.id]
  user_id uuid
  content text [not null]
  created_at timestamp [not null, default: `now()`]
  is_deleted boolean [default: false]
  deleted_at timestamp
  is_hidden boolean [default: false]
  hidden_at timestamp

  indexes {
    discussion_id
    user_id
  }
}
Ref:replies.user_id > users.id [delete: set null]

Table votes {
  user_id uuid [not null] // who voted
  reply_id smallint [not null, ref: > replies.id]
  // Positive int for upvote (e.g. 1), negative for downvote (e.g. -1), 0 if a user cancels their up/downvote
  vote_type integer [not null, note: 'Must be -1, 0, or 1']
  created_at timestamp [not null, default: `now()`]
  updated_at timestamp [not null, default: `now()`]

  indexes {
    (user_id, reply_id) [pk] // prevent duplicate votes on the same reply
    reply_id
    user_id
  }
}
Ref: votes.user_id > users.id [delete: cascade]
