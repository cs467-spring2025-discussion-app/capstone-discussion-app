# justfile docs https://just.systems/man/en/
# This file is used for local development convenience
#
# Dependencies:
# - just https://github.com/casey/just?tab=readme-ov-file
# - psql https://archlinux.org/packages/?name=postgresql
# - rainfrog https://github.com/achristmascarl/rainfrog
# - gotestfmt https://github.com/GoTestTools/gotestfmt
# - CompileDaemon https://github.com/githubnemo/CompileDaemon

PROJECT := "godiscauth"

## NOTE: DEV_DB is for local development for the auth application, not the
## database for the cross-platform discussion app project overall
DEV_DB := "godiscauth"
DEV_USER := "godiscauth"
DEV_PASS := "godiscauth"

TEST_DB := "godiscauth_test"
TEST_USER := "godiscauth_test"
TEST_PASS := "godiscauth_test"

HOST := "localhost"
DB_PORT := "5432"
PORT := "3001"
DRIVER := "postgres"

INITDEVDB := "scripts/init_dev.sql"
INITTESTDB := "scripts/init_testing.sql"

default:
    @just --list

# Run the application and watch for changes, recompile/restart on changes
watch:
    #!/usr/bin/env sh
    export DISCUSSION_APP_SESSION_KEY=$(date | sha256sum | cut -d' ' -f1)
    export AUTH_SERVER_PORT={{PORT}}
    export DATABASE_URL="{{DRIVER}}://{{DEV_USER}}:{{DEV_PASS}}@{{HOST}}:{{DB_PORT}}/{{DEV_DB}}"
    echo "Using DB: $DB"
    CompileDaemon \
    --build="go build -o {{PROJECT}} ./main.go" \
    --command="./{{PROJECT}}"

# go test {{path}} and format the output
test path="":
    #!/usr/bin/env sh
    if [ -z "{{path}}" ]; then
        go test -v -json ./... | gotestfmt -hide successful-tests
    else
        go test -v -json ./internal/{{path}} | gotestfmt -hide successful-tests
    fi

# Initialize auth development database
init env="":
    #!/usr/bin/env sh
    if [ "{{env}}" = "test" ]; then
        sudo -u postgres psql -f {{INITTESTDB}}
    else
        sudo -u postgres psql -f {{INITDEVDB}}
    fi

# Drop database
drop env="":
    #!/usr/bin/env sh
    if [ "{{env}}" = "test" ]; then
        sudo -u postgres psql -c "DROP DATABASE IF EXISTS {{TEST_DB}};"
    else
        sudo -u postgres psql -c "DROP DATABASE IF EXISTS {{DEV_DB}};"
    fi

# Reset database
reset env="":
    just drop {{env}}
    just init {{env}}

# Open database with rainfrog
rain env="":
    #!/usr/bin/env sh
    if [ "{{env}}" = "test" ]; then
        rainfrog \
          --driver="{{DRIVER}}" \
          --username="{{TEST_USER}}" \
          --host="{{HOST}}" \
          --port="{{DB_PORT}}" \
          --database="{{TEST_DB}}" \
          --password="{{TEST_PASS}}"
    else
        rainfrog \
          --driver="{{DRIVER}}" \
          --username="{{DEV_USER}}" \
          --host="{{HOST}}" \
          --port="{{DB_PORT}}" \
          --database="{{DEV_DB}}" \
          --password="{{DEV_PASS}}"
    fi

# Connect to database with psql
pg env="":
    #!/usr/bin/env sh
    if [ "{{env}}" = "test" ]; then
        psql -h {{HOST}} -p {{DB_PORT}} -U {{TEST_USER}} {{TEST_DB}}
    else
        psql -h {{HOST}} -p {{DB_PORT}} -U {{DEV_USER}} {{DEV_DB}}
    fi
